[{"path":"https://appsilon.github.io/data.validator/PULL_REQUEST_TEMPLATE.html","id":"link-to-the-issue","dir":"","previous_headings":"","what":"Link to the issue","title":"NA","text":"submitting PR please answer: * necessary update README? README updated? * unit tests added new logic?","code":""},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"All you need to know about data.validator","text":"data.validator set tools creating reports based validation results assertr. provides tools creating user-friendly reports can send email, store logs folder, generate automatically RStudio Connect.","code":""},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"validate-data","dir":"Articles","previous_headings":"","what":"Validate data","title":"All you need to know about data.validator","text":"basic example validate data: See assertr vignette full specification.","code":"library(assertr) library(dplyr)  validate(mtcars) %>%   validate_cols(description = \"vs and am values equal 0 or 2 only\",          in_set(c(0, 2)), vs, am) %>%   validate_cols(description = \"vs and am values should equal 3 or 4\",          skip_chain_opts = TRUE,          error_fun = warning_append, in_set(c(3, 4)), gear, carb) %>%   validate_rows(description = \"Each row sum for am:vs columns is less or equal 1\",               rowSums, within_bounds(0, 1), vs:am) %>%   validate_cols(description = \"For wt and qsec we have: abs(col) < 2 * sd(col)\",          within_n_sds(2), wt, qsec) %>%   validate_if(description = \"Column drat has only positive values\",          drat > 0) %>%   validate_if(description = \"Column drat has only values larger than 3\",          drat > 3) %>%   add_results(report)"},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"present-results-with-data-validator","dir":"Articles","previous_headings":"","what":"Present results with data.validator","title":"All you need to know about data.validator","text":"first step create validator. Next add validation results validator. Finally, use one available methods present results. Either print summary: save HTML report.","code":"library(data.validator) report <- data_validation_report() library(assertr) library(dplyr)  validate(mtcars) %>%   validate_cols(description = \"vs and am values equal 0 or 2 only\",          in_set(c(0, 2)), vs, am) %>%   validate_cols(description = \"vs and am values should equal 3 or 4\",          skip_chain_opts = TRUE, error_fun = warning_append,          in_set(c(3, 4)), gear, carb) %>%   validate_rows(description = \"Each row sum for am:vs columns is less or equal 1\",               rowSums, within_bounds(0, 1), vs:am) %>%   validate_cols(description = \"For wt and qsec we have: abs(col) < 2 * sd(col)\",          within_n_sds(2), wt, qsec) %>%   validate_if(description = \"Column drat has only positive values\",          drat > 0) %>%   validate_if(description = \"Column drat has only values larger than 3\",          drat > 3) %>%   add_results(report) print(report) #> Validation summary:  #>  Number of successful validations: 1 #>  Number of failed validations: 4 #>  Number of validations with warnings: 1 #>  #> Advanced view:  #>  #>  #> |table_name |description                                       |type    | total_violations| #> |:----------|:-------------------------------------------------|:-------|----------------:| #> |mtcars     |Column drat has only positive values              |success |               NA| #> |mtcars     |Column drat has only values larger than 3         |error   |                4| #> |mtcars     |Each row sum for am:vs columns is less or equal 1 |error   |                7| #> |mtcars     |For wt and qsec we have: abs(col) < 2 * sd(col)   |error   |                4| #> |mtcars     |vs and am values equal 0 or 2 only                |error   |               27| #> |mtcars     |vs and am values should equal 3 or 4              |warning |               24| save_report(report)"},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"creating-custom-reports","dir":"Articles","previous_headings":"","what":"Creating custom reports","title":"All you need to know about data.validator","text":"Define function validation_results parameter returns HTML object HTML widget. validation_results parameter assumed passed results table extracted get_results(validator). Note function can also store optional parameters passed save_report function generating new report. example create custom report shows validation results checking whether population across Polish counties fits within 3 standard deviations. can also present results Leaflet map.","code":"library(magrittr) library(assertr) library(data.validator)  report <- data_validation_report()  file <- system.file(\"extdata\", \"population.csv\", package = \"data.validator\") population <- read.csv(file, colClasses = c(\"character\", \"character\", \"character\",                                             \"integer\", \"integer\", \"integer\"))  validate(population) %>%   validate_cols(within_n_sds(3), total) %>%   add_results(report)  print(report) #> Validation summary:  #>  Number of successful validations: 0 #>  Number of failed validations: 1 #>  Number of validations with warnings: 0 #>  #> Advanced view:  #>  #>  #> |table_name |description |type  | total_violations| #> |:----------|:-----------|:-----|----------------:| #> |population |NA          |error |                6| render_leaflet_report <- function(validation_results, population_data, correct_col, violated_col) {   file <- system.file(\"extdata\", \"counties.json\", package = \"data.validator\")   states <- rgdal::readOGR(file, GDAL1_integer64_policy = TRUE, verbose = FALSE)    violated <- validation_results %>%     tidyr::unnest(error_df, keep_empty = TRUE) %>%     dplyr::pull(index)    states@data <- dplyr::left_join(states@data, population_data,                                   by = c(\"JPT_KOD_JE\" = \"county_ID\"))   states@data$color <- correct_col   states@data$color[violated] <- violated_col   states@data$label <- glue::glue(\"County: {states@data$county} <br>\",                                   \"Population: {states@data$total}\")    htmltools::tagList(     htmltools::h2(\"Counties not fitting within 3 standard deviations\"),     leaflet::leaflet(states) %>%       leaflet::addPolygons(color = \"#444444\", weight = 1, smoothFactor = 0.5,                            opacity = 0.5, fillOpacity = 0.5,                            fillColor = states@data$color,                            label = states@data$label %>% lapply(htmltools::HTML),                            highlightOptions = leaflet::highlightOptions(color = \"white\",                                                                         weight = 2,                                                                         bringToFront = TRUE))   ) }  save_report(   report,   ui_constructor = render_leaflet_report,   population_data = population,   correct_col = \"#52cf0a\",   violated_col = \"#bf0b4d\" )"},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"creating-custom-report-templates","dir":"Articles","previous_headings":"","what":"Creating custom report templates","title":"All you need to know about data.validator","text":"order generate R Markdown reports data.validator uses predefined report template like one . can use default template basis creating template. order , first load package RStudio. select File → New File → R Markdown → Template → Simple structure HTML report summary. Next modify template adding example custom title graphics. Leave params section header unchanged, well generate_report content renderer chunk. calling save_report function, make sure specify path custom template template parameter.","code":"--- title: Data validation report output: html_document params:   generate_report_html: !expr function(...) {}   extra_params: !expr list() ---  #### `r format(Sys.time(), \"%Y-%m-%d %H:%M:%S\")`  ```{r generate_report, echo = FALSE} params$generate_report_html(params$extra_params) ```"},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"using-the-package-in-production","dir":"Articles","previous_headings":"","what":"Using the package in production","title":"All you need to know about data.validator","text":"package successfully used Appsilon production environment protecting Shiny apps run incorrect data. workflow based steps : Running RStudio Connect Scheduler daily. scheduler sources data PostgreSQL table validates based predefined rules. Based validation results new data.validator report created. data validation rules violated: data provider person responsible data quality receive report via email. Thanks assertr functionality, report easily understandable technical non-technical persons. data provider makes required data fixes. data meets validation rules: specific trigger sent order reload data Shiny app.","code":""},{"path":"https://appsilon.github.io/data.validator/articles/data_validator.html","id":"more-examples","dir":"Articles","previous_headings":"","what":"More examples","title":"All you need to know about data.validator","text":"options check package documentation examples.","code":""},{"path":"https://appsilon.github.io/data.validator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Krystian Igras. Author. Marcin Dubel. Author, maintainer. Paweł Przytuła. Author. Dominik Krzeminski. Contributor. Servet Ahmet Çizmeli. Contributor. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/data.validator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Igras K, Dubel M, Przytuła P (2022). data.validator: Automatic Data Validation Reporting. R package version 0.1.7.","code":"@Manual{,   title = {data.validator: Automatic Data Validation and Reporting},   author = {Krystian Igras and Marcin Dubel and Paweł Przytuła},   year = {2022},   note = {R package version 0.1.7}, }"},{"path":"https://appsilon.github.io/data.validator/index.html","id":"datavalidator-","dir":"","previous_headings":"","what":"Automatic Data Validation and Reporting","title":"Automatic Data Validation and Reporting","text":"Validate data create nice reports straight R.","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Automatic Data Validation and Reporting","text":"data.validator package scalable reproducible data validation. provides: Functions validating datasets %>% pipelines: validate_if, validate_cols validate_rows Predicate functions assertr package, like in_set, within_bounds, etc. Functions creating user-friendly reports can send email, store logs folder, generate automatically RStudio Connect.","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Data Validation and Reporting","text":"Install CRAN: latest development version:","code":"install.packages(\"data.validator\") remotes::install_github(\"Appsilon/data.validator\")"},{"path":"https://appsilon.github.io/data.validator/index.html","id":"data-validation","dir":"","previous_headings":"","what":"Data validation","title":"Automatic Data Validation and Reporting","text":"Validaton cycle simple: Create report object. Prepare dataset. can load , preprocess run validate() pipeline. Start validation block validate() function. adds new section report. Use validate_* functions predicates validate data. can create custom predicates. See () example. Add assertion results report add_results() Print results generate HTML report.","code":"library(assertr) library(magrittr) library(data.validator)  report <- data_validation_report()  validate(mtcars, name = \"Verifying cars dataset\") %>%   validate_if(drat > 0, description = \"Column drat has only positive values\") %>%   validate_cols(in_set(c(0, 2)), vs, am, description = \"vs and am values equal 0 or 2 only\") %>%   validate_cols(within_n_sds(1), mpg, description = \"mpg within 1 sds\") %>%   validate_rows(num_row_NAs, within_bounds(0, 2), vs, am, mpg, description = \"not too many NAs in rows\") %>%   validate_rows(maha_dist, within_n_mads(10), everything(), description = \"maha dist within 10 mads\") %>%   add_results(report)  between <- function(a, b) {   function(x) { a <= x && x <= b } }  validate(iris, name = \"Verifying flower dataset\") %>%   validate_if(Sepal.Length > 0, description = \"Sepal length is greater than 0\") %>%   validate_cols(between(0, 4), Sepal.Width, description = \"Sepal width is between 0 and 4\") %>%   add_results(report)  print(report)"},{"path":"https://appsilon.github.io/data.validator/index.html","id":"reporting","dir":"","previous_headings":"","what":"Reporting","title":"Automatic Data Validation and Reporting","text":"Print results console: Save HTML report","code":"print(report)  # Validation summary: #  Number of successful validations: 1 #  Number of failed validations: 4 #  Number of validations with warnings: 1 # # Advanced view: # # |table_name |description                                       |type    | total_violations| # |:----------|:-------------------------------------------------|:-------|----------------:| # |mtcars     |Column drat has only positive values              |success |               NA| # |mtcars     |Column drat has only values larger than 3         |error   |                4| # |mtcars     |Each row sum for am:vs columns is less or equal 1 |error   |                7| # |mtcars     |For wt and qsec we have: abs(col) < 2 * sd(col)   |error   |                4| # |mtcars     |vs and am values equal 0 or 2 only                |error   |               27| # |mtcars     |vs and am values should equal 3 or 4              |warning |               24| save_report(report)"},{"path":[]},{"path":"https://appsilon.github.io/data.validator/index.html","id":"checking-key-columns-uniqueness","dir":"","previous_headings":"Full examples","what":"Checking key columns uniqueness","title":"Automatic Data Validation and Reporting","text":"Common step data validation assuring key columns unique empty. Test dataset preparing validation schema can created fixtuRes package.","code":"library(fixtuRes) library(magrittr) library(assertr) library(data.validator)  my_mock_generator <- fixtuRes::MockDataGenerator$new(\"path-to-my-configuration.yml\") my_data_frame <- my_mock_generator$get_data(\"my_data_frame\", 10)  report <- data.validator::data_validation_report()  validate(my_data_frame, name = \"Verifying data uniqueness\") %>%   validate_if(is_uniq(id), description = \"ID column is unique\") %>%   validate_if(!is.na(id) & id != \"\", description = \"ID column is not empty\") %>%   validate_if(is.character(code), description = \"CODE column is string\") %>%   validate_rows(col_concat, is_uniq, code, type, description = \"CODE and TYPE combination is unique\") %>%   add_results(report)  print(report)  # Validation summary: #  Number of successful validations: 4 #  Number of failed validations: 0 #  Number of validations with warnings: 0 # # Advanced view: # # # |table_name              |description                         |type    | total_violations| # |:-----------------------|:-----------------------------------|:-------|----------------:| # |Verifying data uniqness |CODE and TYPE combination is unique |success |               NA| # |Verifying data uniqness |CODE column is string               |success |               NA| # |Verifying data uniqness |ID column is not empty              |success |               NA| # |Verifying data uniqness |ID column is unique                 |success |               NA|"},{"path":"https://appsilon.github.io/data.validator/index.html","id":"custom-reporting-on-leaflet-map","dir":"","previous_headings":"Full examples","what":"Custom reporting on leaflet map","title":"Automatic Data Validation and Reporting","text":"Custom reporting leaflet map","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"other-examples","dir":"","previous_headings":"Full examples","what":"Other examples","title":"Automatic Data Validation and Reporting","text":"Minimal example get started Convenient API Various way saving reports Rendering report part Shiny app","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"using-custom-report-templates","dir":"","previous_headings":"","what":"Using custom report templates","title":"Automatic Data Validation and Reporting","text":"order generate rmarkdown report data.validator uses predefined report template. may find inst/rmarkdown/templates/standard/skeleton/skeleton.Rmd. report contains basic requirements report template used save_report function: defining params calling content renderer chunk want use template base can use RStudio. Load package use File -> New File -> R Markdown -> template -> Simple structure HTML report summary. modify template adding custom title, graphics leaving points unchanged specify path inside save_report’s template parameter.","code":"params:   generate_report_html: !expr function(...) {}   extra_params: list() ```{r generate_report, echo = FALSE} params$generate_report_html(params$extra_params) ```"},{"path":"https://appsilon.github.io/data.validator/index.html","id":"how-the-package-can-be-used-in-production","dir":"","previous_headings":"","what":"How the package can be used in production?","title":"Automatic Data Validation and Reporting","text":"package successfully used Appsilon production environment protecting Shiny Apps run incorrect data. workflow based steps: Running RStudio Connect Scheduler daily. Scheduler sources data PostgreSQL table validates based predefined rules. Based validation results new data.validator report created. 4a. data violated: data provider person responsible data quality receives report via email thanks assertr functionality, report easily understandable technical, non-technical person data provider makes required data fixes 4b. data correct: specific trigger sent order reload Shiny data","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"working-example","dir":"","previous_headings":"","what":"Working example","title":"Automatic Data Validation and Reporting","text":"Check simple example scheduled validation storing data pin : connect_validation_workflow workflow presented graphics","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Automatic Data Validation and Reporting","text":"want contribute project please submit regular PR, ’re done new feature bug fix. Reporting bug also helpful - please use GitHub issues describe problem detailed possible.","code":""},{"path":"https://appsilon.github.io/data.validator/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Automatic Data Validation and Reporting","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Check Open Source tools.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/add_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Add validation results to the Report object — add_results","title":"Add validation results to the Report object — add_results","text":"function adds results validator object aggregating summary   success, error warning checks. Moreover parses assertr results attributes stores   inside usable table.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/add_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add validation results to the Report object — add_results","text":"","code":"add_results(data, report)"},{"path":"https://appsilon.github.io/data.validator/reference/add_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add validation results to the Report object — add_results","text":"data Data validated. report Report object store validation results.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/check_assertr_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","title":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","text":"Defensive wrapper add evaluation error regular validation errors.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/check_assertr_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","text":"","code":"check_assertr_expression(this_call, data, description, error_fun)"},{"path":"https://appsilon.github.io/data.validator/reference/check_assertr_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","text":"this_call assertion command checked valuation errors. data data.frame tibble test. description character string description assertion. error_fun Function called validation fails","code":""},{"path":"https://appsilon.github.io/data.validator/reference/check_assertr_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","text":"validation object evaluation errors added list occurred.","code":""},{"path":[]},{"path":"https://appsilon.github.io/data.validator/reference/check_assertr_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defensive wrapper to add evaluation error to regular validation errors. — check_assertr_expression","text":"","code":"if (FALSE) { library(fixtuRes) library(magrittr) library(assertr) library(data.validator)  my_mock_generator <- fixtuRes::MockDataGenerator$new(\"fixtures_config.yml\") my_data_frame <- my_mock_generator$get_data(\"my_data_frame\", 10)  report <- data.validator::data_validation_report()  validate(my_data_frame, name = \"Verifying data uniqueness\") %>%   validate_if(has_all_names(\"id\", \"code\", \"test\"), description = \"All columns are there\") %>%   validate_if(is.character(test), description = \"TEST column is string\") %>%   validate_if(is_uniq(id), description = \"ID column is unique\") %>%   validate_if(!is.na(id) & id != \"\", description = \"ID column is not empty\") %>%   validate_if(is.character(code), description = \"CODE column is string\") %>%   validate_rows(col_concat, is_uniq, code, type, description = \"CODE and TYPE is unique\") %>%   add_results(report)  print(report) }"},{"path":"https://appsilon.github.io/data.validator/reference/convert_error_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert error table column types — convert_error_df","title":"Convert error table column types — convert_error_df","text":"Convert error table column types","code":""},{"path":"https://appsilon.github.io/data.validator/reference/convert_error_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert error table column types — convert_error_df","text":"","code":"convert_error_df(error_df)"},{"path":"https://appsilon.github.io/data.validator/reference/convert_error_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert error table column types — convert_error_df","text":"error_df Table consisting assertr error details","code":""},{"path":"https://appsilon.github.io/data.validator/reference/create_summary_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary table row. — create_summary_row","title":"Create summary table row. — create_summary_row","text":"Create summary table row.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/create_summary_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary table row. — create_summary_row","text":"","code":"create_summary_row(id, number, color, label)"},{"path":"https://appsilon.github.io/data.validator/reference/create_summary_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary table row. — create_summary_row","text":"id ID. number Number display. color Color label. label Label display.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/create_summary_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary table row. — create_summary_row","text":"Summary table row.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/data_validation_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new validator object — data_validation_report","title":"Create new validator object — data_validation_report","text":"object returns R6 class environment responsible storing validation results.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/data_validation_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new validator object — data_validation_report","text":"","code":"data_validation_report()"},{"path":"https://appsilon.github.io/data.validator/reference/display_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays results of validations. — display_results","title":"Displays results of validations. — display_results","text":"Displays results validations.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/display_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays results of validations. — display_results","text":"","code":"display_results(data, n_passes, n_fails, n_warns)"},{"path":"https://appsilon.github.io/data.validator/reference/display_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays results of validations. — display_results","text":"data Report data. n_passes Number successful assertions. n_fails Number warning assertions. n_warns Number violation assertions.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/display_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays results of validations. — display_results","text":"Validation report.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/error_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants — error_class","title":"Constants — error_class","text":"Constants","code":""},{"path":"https://appsilon.github.io/data.validator/reference/error_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants — error_class","text":"","code":"error_class"},{"path":"https://appsilon.github.io/data.validator/reference/error_class.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants — error_class","text":"object class character length 1.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/find_chain_parts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all chain parts in parent frame — find_chain_parts","title":"Find all chain parts in parent frame — find_chain_parts","text":"Find chain parts parent frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/find_chain_parts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all chain parts in parent frame — find_chain_parts","text":"","code":"find_chain_parts()"},{"path":"https://appsilon.github.io/data.validator/reference/generate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random ID. — generate_id","title":"Generate a random ID. — generate_id","text":"Generate random ID.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/generate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random ID. — generate_id","text":"","code":"generate_id()"},{"path":"https://appsilon.github.io/data.validator/reference/generate_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random ID. — generate_id","text":"characters corresponding random ID.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_assert_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Match proper method depending on predicate type — get_assert_method","title":"Match proper method depending on predicate type — get_assert_method","text":"Match proper method depending predicate type","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_assert_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match proper method depending on predicate type — get_assert_method","text":"","code":"get_assert_method(   predicate,   method = list(direct = assertr::assert, generator = assertr::insist) )"},{"path":"https://appsilon.github.io/data.validator/reference/get_assert_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match proper method depending on predicate type — get_assert_method","text":"predicate Predicate predicate generator function. method optional list fields direct generator assertions","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_assertion_type.html","id":null,"dir":"Reference","previous_headings":"","what":"get assertion type — get_assertion_type","title":"get assertion type — get_assertion_type","text":"get assertion type","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_assertion_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get assertion type — get_assertion_type","text":"","code":"get_assertion_type(assertion)"},{"path":"https://appsilon.github.io/data.validator/reference/get_assertion_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get assertion type — get_assertion_type","text":"assertion assertion object (check assertr package details)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_assertion_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get assertion type — get_assertion_type","text":"character id assertion: \"error\", \"success\", \"warning\"","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_first_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get first name of the data frame — get_first_name","title":"Get first name of the data frame — get_first_name","text":"Get first name data frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_first_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get first name of the data frame — get_first_name","text":"","code":"get_first_name(df)"},{"path":"https://appsilon.github.io/data.validator/reference/get_first_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get first name of the data frame — get_first_name","text":"df data.frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_first_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get first name of the data frame — get_first_name","text":"deparsed chain part","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Get validation results — get_results","title":"Get validation results — get_results","text":"response list containing information successful, failed,   warning assertions andthe table stores important information validation results.   : table_name - name validated table assertion.id - id used assertion description - assertion description num.violations - number violations (assertion column specific) call - assertion call message - assertion result message specific column type - error, warning success error_df - nested table storing details error warning result (like violated       indexes values)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get validation results — get_results","text":"","code":"get_results(report, unnest = FALSE)"},{"path":"https://appsilon.github.io/data.validator/reference/get_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get validation results — get_results","text":"report Report object stores validation results. See add_results. unnest TRUE, error_df table unnested. Results remaining columns duplicated table.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_results_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Get results number — get_results_number","title":"Get results number — get_results_number","text":"Get results number","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_results_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get results number — get_results_number","text":"","code":"get_results_number(results)"},{"path":"https://appsilon.github.io/data.validator/reference/get_results_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get results number — get_results_number","text":"results assertion results","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_results_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get results number — get_results_number","text":"table results number","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_semantic_report_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HTML report. — get_semantic_report_ui","title":"Generate HTML report. — get_semantic_report_ui","text":"Generate HTML validation report.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_semantic_report_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HTML report. — get_semantic_report_ui","text":"","code":"get_semantic_report_ui(n_passes, n_fails, n_warns, validation_results)"},{"path":"https://appsilon.github.io/data.validator/reference/get_semantic_report_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HTML report. — get_semantic_report_ui","text":"n_passes Number passed validations n_fails Number failed validations. n_warns Number warnings. validation_results Data frame validation results.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/get_semantic_report_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate HTML report. — get_semantic_report_ui","text":"HTML validation report.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI accordion container. — make_accordion_container","title":"Create a UI accordion container. — make_accordion_container","text":"Create UI accordion container.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI accordion container. — make_accordion_container","text":"","code":"make_accordion_container(...)"},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI accordion container. — make_accordion_container","text":"... Additional arguments inside accordion container.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI accordion container. — make_accordion_container","text":"Accordion container.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI accordion element. — make_accordion_element","title":"Create a UI accordion element. — make_accordion_element","text":"Create UI accordion element.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI accordion element. — make_accordion_element","text":"","code":"make_accordion_element(   results,   color = \"green\",   label,   active = FALSE,   type,   mark )"},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI accordion element. — make_accordion_element","text":"results Results display. color Color label icon. label Label. active active? type Result type. mark Icon display.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_accordion_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI accordion element. — make_accordion_element","text":"Accordion.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary table. — make_summary_table","title":"Create summary table. — make_summary_table","text":"Create summary table.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary table. — make_summary_table","text":"","code":"make_summary_table(n_passes, n_fails, n_warns)"},{"path":"https://appsilon.github.io/data.validator/reference/make_summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary table. — make_summary_table","text":"n_passes Number passed validations. n_fails Number failed validations. n_warns Number warnings.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_summary_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary table. — make_summary_table","text":"Summary table.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_table_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table row. — make_table_row","title":"Create table row. — make_table_row","text":"Create table row.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_table_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table row. — make_table_row","text":"","code":"make_table_row(results, type, mark)"},{"path":"https://appsilon.github.io/data.validator/reference/make_table_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table row. — make_table_row","text":"results Results display row. type Result type. mark Icon display.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/make_table_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table row. — make_table_row","text":"Table row.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_errors_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse errors to data.frame — parse_errors_to_df","title":"Parse errors to data.frame — parse_errors_to_df","text":"Parse errors data.frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_errors_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse errors to data.frame — parse_errors_to_df","text":"","code":"parse_errors_to_df(data)"},{"path":"https://appsilon.github.io/data.validator/reference/parse_errors_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse errors to data.frame — parse_errors_to_df","text":"data object assertr error class  (check assertr package details)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_errors_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse errors to data.frame — parse_errors_to_df","text":"data.frame errors","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_results_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse results to data.frame — parse_results_to_df","title":"Parse results to data.frame — parse_results_to_df","text":"Parse results data.frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_results_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse results to data.frame — parse_results_to_df","text":"","code":"parse_results_to_df(data)"},{"path":"https://appsilon.github.io/data.validator/reference/parse_results_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse results to data.frame — parse_results_to_df","text":"data assertr object  (check assertr package details)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_results_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse results to data.frame — parse_results_to_df","text":"data.frame successes errors","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_successes_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse successes to data.frame — parse_successes_to_df","title":"Parse successes to data.frame — parse_successes_to_df","text":"Parse successes data.frame","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_successes_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse successes to data.frame — parse_successes_to_df","text":"","code":"parse_successes_to_df(data)"},{"path":"https://appsilon.github.io/data.validator/reference/parse_successes_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse successes to data.frame — parse_successes_to_df","text":"data object assertr success class  (check assertr package details)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/parse_successes_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse successes to data.frame — parse_successes_to_df","text":"data.frame successes","code":""},{"path":"https://appsilon.github.io/data.validator/reference/prepare_modal_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare modal content. — prepare_modal_content","title":"Prepare modal content. — prepare_modal_content","text":"Prepare modal content.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/prepare_modal_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare modal content. — prepare_modal_content","text":"","code":"prepare_modal_content(error)"},{"path":"https://appsilon.github.io/data.validator/reference/prepare_modal_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare modal content. — prepare_modal_content","text":"error Assertr error.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/prepare_modal_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare modal content. — prepare_modal_content","text":"Modal content.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/render_raw_report_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Render simple version of report — render_raw_report_ui","title":"Render simple version of report — render_raw_report_ui","text":"Renders content simple report version prints validation_results   table.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/render_raw_report_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render simple version of report — render_raw_report_ui","text":"","code":"render_raw_report_ui(   validation_results,   success = TRUE,   warning = TRUE,   error = TRUE )"},{"path":"https://appsilon.github.io/data.validator/reference/render_raw_report_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render simple version of report — render_raw_report_ui","text":"validation_results Validation results table (see get_results). success success results presented? warning warning results presented? error error results presented?","code":""},{"path":"https://appsilon.github.io/data.validator/reference/render_semantic_report_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Render semantic version of report — render_semantic_report_ui","title":"Render semantic version of report — render_semantic_report_ui","text":"Renders content semantic report version.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/render_semantic_report_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render semantic version of report — render_semantic_report_ui","text":"","code":"render_semantic_report_ui(   validation_results,   success = TRUE,   warning = TRUE,   error = TRUE )"},{"path":"https://appsilon.github.io/data.validator/reference/render_semantic_report_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render semantic version of report — render_semantic_report_ui","text":"validation_results Validation results table (see get_results). success success results presented? warning warning results presented? error error results presented?","code":""},{"path":"https://appsilon.github.io/data.validator/reference/result_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table with results. — result_table","title":"Create table with results. — result_table","text":"Create table results.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/result_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table with results. — result_table","text":"","code":"result_table(results, type, mark)"},{"path":"https://appsilon.github.io/data.validator/reference/result_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table with results. — result_table","text":"results Result display table. type Result type. mark Icon display.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/result_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table with results. — result_table","text":"Table row.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving results as a HTML report — save_report","title":"Saving results as a HTML report — save_report","text":"Saving results HTML report","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving results as a HTML report — save_report","text":"","code":"save_report(   report,   output_file = \"validation_report.html\",   output_dir = getwd(),   ui_constructor = render_semantic_report_ui,   template = system.file(\"rmarkdown/templates/standard/skeleton/skeleton.Rmd\", package =     \"data.validator\"),   ... )"},{"path":"https://appsilon.github.io/data.validator/reference/save_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving results as a HTML report — save_report","text":"report Report object stores validation results. output_file Html file name write report . output_dir Target report directory. ui_constructor Function validation_results optional parameters generates HTML code HTML widget used generate report content. See custom_report example. template Path Rmd template ui_constructor rendered. See data.validator rmarkdown template see basic construction - one used default template. ... Additional parameters passed ui_constructor.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving results table to external file — save_results","title":"Saving results table to external file — save_results","text":"Saving results table external file","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving results table to external file — save_results","text":"","code":"save_results(report, file_name = \"results.csv\", method = utils::write.csv, ...)"},{"path":"https://appsilon.github.io/data.validator/reference/save_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving results table to external file — save_results","text":"report Report object stores validation results. See get_results. file_name Name resulting file (including extension). method Function used save results table (write.csv default). ... Remaining parameters passed method.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Save simple validation summary in text file — save_summary","title":"Save simple validation summary in text file — save_summary","text":"Saves print(validator) output inside text file.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/save_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save simple validation summary in text file — save_summary","text":"","code":"save_summary(   report,   file_name = \"validation_log.txt\",   success = TRUE,   warning = TRUE,   error = TRUE )"},{"path":"https://appsilon.github.io/data.validator/reference/save_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save simple validation summary in text file — save_summary","text":"report Report object stores validation results. file_name Name resulting file (including extension). success success results presented? warning warning results presented? error error results presented?","code":""},{"path":"https://appsilon.github.io/data.validator/reference/segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI segment element. — segment","title":"Create a UI segment element. — segment","text":"Create UI segment element.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI segment element. — segment","text":"","code":"segment(title, ...)"},{"path":"https://appsilon.github.io/data.validator/reference/segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI segment element. — segment","text":"title Title segment. ... Additional arguments inside segment.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI segment element. — segment","text":"Segment.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for validation chain — validate","title":"Prepare data for validation chain — validate","text":"Prepare data validation generating report. function prepares data chain validation ensures validation results gathered correctly. function also attaches additional information data (name description) displayed validation report.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for validation chain — validate","text":"","code":"validate(data, name, description = NULL)"},{"path":"https://appsilon.github.io/data.validator/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for validation chain — validate","text":"data data.frame tibble test name name validation object (displayed report) description description validation object (displayed report)","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation on columns — validate_cols","title":"Validation on columns — validate_cols","text":"Validation columns","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation on columns — validate_cols","text":"","code":"validate_cols(   data,   predicate,   ...,   obligatory = FALSE,   description = NA,   skip_chain_opts = FALSE,   success_fun = assertr::success_append,   error_fun = assertr::error_append,   defect_fun = assertr::defect_append )"},{"path":"https://appsilon.github.io/data.validator/reference/validate_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation on columns — validate_cols","text":"data data.frame tibble test predicate Predicate function predicate generator in_set within_n_sds ... Columns selection predicate called . tidyselect language methods supported obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function description character string description assertion. description displayed validation report skip_chain_opts wrapping data validate function, success_fun error_fun parameters rewritten success_append error_append respectively. order use parameters assigned function directly set skip_chain_opts TRUE success_fun Function called validation pass error_fun Function called validation fails defect_fun Function called data marked defective","code":""},{"path":[]},{"path":"https://appsilon.github.io/data.validator/reference/validate_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify if expression regarding data is TRUE — validate_if","title":"Verify if expression regarding data is TRUE — validate_if","text":"function checks whether logical values returned expression TRUE. function meant handling cases reached using validate_cols validate_rows functions.","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify if expression regarding data is TRUE — validate_if","text":"","code":"validate_if(   data,   expr,   description = NA,   obligatory = FALSE,   skip_chain_opts = FALSE,   success_fun = assertr::success_append,   error_fun = assertr::error_append,   defect_fun = assertr::defect_append )"},{"path":"https://appsilon.github.io/data.validator/reference/validate_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify if expression regarding data is TRUE — validate_if","text":"data data.frame tibble test expr Logical expression test , e.g. var_name > 0 description character string description assertion. description displayed validation report obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function skip_chain_opts wrapping data validate function, success_fun error_fun parameters rewritten success_append error_append respectively. order use parameters assigned function directly set skip_chain_opts TRUE success_fun Function called validation pass error_fun Function called validation fails defect_fun Function called data marked defective","code":""},{"path":[]},{"path":"https://appsilon.github.io/data.validator/reference/validate_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation on rows — validate_rows","title":"Validation on rows — validate_rows","text":"Validation rows","code":""},{"path":"https://appsilon.github.io/data.validator/reference/validate_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation on rows — validate_rows","text":"","code":"validate_rows(   data,   row_reduction_fn,   predicate,   ...,   obligatory = FALSE,   description = NA,   skip_chain_opts = FALSE,   success_fun = assertr::success_append,   error_fun = assertr::error_append,   defect_fun = assertr::defect_append )"},{"path":"https://appsilon.github.io/data.validator/reference/validate_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation on rows — validate_rows","text":"data data.frame tibble test row_reduction_fn Function reduce rows single column passed validation e.g. num_row_NAs predicate Predicate function predicate generator in_set within_n_sds ... Columns selection row_reduction_fn called . tidyselect language methods supported obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function description character string description assertion. description displayed validation report skip_chain_opts wrapping data validate function, success_fun error_fun parameters rewritten success_append error_append respectively. order use parameters assigned function directly set skip_chain_opts TRUE. success_fun Function called validation pass error_fun Function called validation fails defect_fun Function called data marked defective","code":""},{"path":[]}]
